1. profile.jsp
This page will display the user's profile information, including their username, email, and full name. It will also provide a form to update their information.
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ page import="com.user.User" %>
<%@ page session="false" %>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>User Profile</title>
</head>
<body>
    <h1>User Profile</h1>
    <%
        User user = (User ) request.getAttribute("user");
        if (user != null) {
    %>
        <p><strong>Username:</strong> <%= user.getUsername() %></p>
        <p><strong>Email:</strong> <%= user.getEmail() %></p>
        <p><strong>Full Name:</strong> <%= user.getFullName() %></p>
        
        <h2>Update Profile</h2>
        <form action="updateProfile" method="post">
            <input type="hidden" name="username" value="<%= user.getUsername() %>"/>
            <label for="email">Update Email:</label><br>
            <input type="email" name="email" value="<%= user.getEmail() %>" required/><br>
            <label for="full_name">Update Full Name:</label><br>
            <input type="text" name="full_name" value="<%= user.getFullName() %>" required/><br>
            <input type="submit" value="Update Profile"/>
        </form>
    <%
        } else {
    %>
        <p>User not found.</p>
    <%
        }
    %>
    <a href="login.jsp">Logout</a>
</body>
</html>
2. userList.jsp
This page will display a list of all registered users. It can be useful for administrators or for users to see other users (if applicable).
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ page import="java.util.List" %>
<%@ page import="com.user.User" %>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>User List</title>
</head>
<body>
    <h1>Registered Users</h1>
    <%
        List<User> userList = (List<User>) request.getAttribute("userList");
        if (userList != null && !userList.isEmpty()) {
    %>
        <table border="1">
            <tr>
                <th>Username</th>
                <th>Email</th>
                <th>Full Name</th>
            </tr>
            <%
                for (User  user : userList) {
            %>
            <tr>
                <td><%= user.getUsername() %></td>
                <td><%= user.getEmail() %></td>
                <td><%= user.getFullName() %></td>
            </tr>
            <%
                }
            %>
        </table>
    <%
        } else {
    %>
        <p>No users found.</p>
    <%
        }
    %>
    <a href="profile.jsp">Back to Profile</a>
</body>
</html>
3. registrationSuccess.jsp
This page will be displayed after a successful registration, confirming that the user has been registered.
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Registration Successful</title>
</head>
<body>
    <h1>Registration Successful</h1>
    <p>Thank you for registering! You can now <a href="login.jsp">login</a>.</p>
</body>
</html>
4. Update the RegistrationServlet
To redirect to the registrationSuccess.jsp page after a successful registration, update the RegistrationServlet.java:
package com.user;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;

@WebServlet("/register")
public class RegistrationServlet extends HttpServlet {
    protected void doPost(Http
Complete RegistrationServlet.java
Here’s the complete implementation of the RegistrationServlet.java:
package com.user;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;

@WebServlet("/register")
public class RegistrationServlet extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String username = request.getParameter("username");
        String password = request.getParameter("password");
        String email = request.getParameter("email");
        String fullName = request.getParameter("full_name");

        try {
            // Database connection
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/user_db", "root", "password");

            // Insert user into database
            String sql = "INSERT INTO users (username, password, email, full_name) VALUES (?, ?, ?, ?)";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setString(1, username);
            statement.setString(2, password); // In a real application, hash the password
            statement.setString(3, email);
            statement.setString(4, fullName);
            statement.executeUpdate();

            // Close connection
            statement.close();
            connection.close();

            // Redirect to registration success page
            response.sendRedirect("registrationSuccess.jsp");
        } catch (Exception e) {
            e.printStackTrace();
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Registration failed.");
        }
    }
}
Summary of the JSP Pages
profile.jsp: Displays the user's profile information and allows them to update their email and full name.
userList.jsp: Displays a list of all registered users. This can be useful for administrative purposes or for users to see other users.
registrationSuccess.jsp: Confirms successful registration and provides a link to the login page.
Step 5: Update the Profile Update Logic
Make sure that the UpdateProfileServlet is implemented to handle the profile updates. Here’s a simple implementation:

UpdateProfileServlet.java
package com.user;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;

@WebServlet("/updateProfile")
public class UpdateProfileServlet extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String username = request.getParameter("username");
        String email = request.getParameter("email");
        String fullName = request.getParameter("full_name");

        try {
            // Database connection
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/user_db", "root", "password");

            // Update user details
            String sql = "UPDATE users SET email = ?, full_name = ? WHERE username = ?";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setString(1, email);
            statement.setString(2, fullName);
            statement.setString(3, username);
            statement.executeUpdate();

            // Close connections
            statement.close();
            connection.close();

            // Redirect to profile page
            response.sendRedirect("profile?username=" + username);
        } catch (Exception e) {
            e.printStackTrace();
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Error updating profile.");
        }
    }
}
Step 6: Testing the Application
Deploy the Application: Ensure your servlet is deployed on your Tomcat server.
Start the Tomcat Server: Start your Tomcat server.
Access the Registration Page: Open your web browser and navigate to:
http://localhost:8080/UserRegistrationApp/register.jsp
Register a New User: Fill out the registration form and submit it. You should be redirected to the registrationSuccess.jsp page.
Login: After registration, navigate to the login page:

http://localhost:8080/UserRegistrationApp/login.jsp
Enter the username and password you registered with.
View Profile: Upon successful login, you should be redirected to your profile page, where you can view and update your information.
