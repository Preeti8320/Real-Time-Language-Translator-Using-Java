Overview of Integration
Servlets: Handle requests, process data, and forward results to JSPs.
JSPs: Render the HTML and display data to the user.
Step-by-Step Integration
Let's modify the previous user registration and profile management example to use JSP for the presentation layer.

Step 1: Update Project Structure
Your project structure should look like this:
User RegistrationApp
├── src
│   └── com
│       └── user
│           ├── RegistrationServlet.java
│           ├── ProfileServlet.java
│           ├── LoginServlet.java
│           └── User.java
├── WebContent
│   ├── WEB-INF
│   │   └── web.xml
│   ├── register.jsp
│   ├── profile.jsp
│   └── login.jsp
Step 2: Create JSP Files
1. register.jsp
Create a register.jsp file for user registration:
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>User Registration</title>
</head>
<body>
    <h1>User Registration</h1>
    <form action="register" method="post">
        <label for="username">Username:</label><br>
        <input type="text" id="username" name="username" required><br>
        
        <label for="password">Password:</label><br>
        <input type="password" id="password" name="password" required><br>
        
        <label for="email">Email:</label><br>
        <input type="email" id="email" name="email" required><br>
        
        <label for="full_name">Full Name:</label><br>
        <input type="text" id="full_name" name="full_name" required><br><br>
        
        <input type="submit" value="Register">
    </form>
    <p>Already have an account? <a href="login.jsp">Login here</a>.</p>
</body>
</html>
2. login.jsp
Create a login.jsp file for user login:
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>User Login</title>
</head>
<body>
    <h1>User Login</h1>
    <form action="login" method="post">
        <label for="username">Username:</label><br>
        <input type="text" id="username" name="username" required><br>
        
        <label for="password">Password:</label><br>
        <input type="password" id="password" name="password" required><br><br>
        
        <input type="submit" value="Login">
    </form>
    <p>Don't have an account? <a href="register.jsp">Register here</a>.</p>
</body>
</html>
3. profile.jsp
Create a profile.jsp file to display user profile information:
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ page import="com.user.User" %>
<%@ page session="false" %>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>User Profile</title>
</head>
<body>
    <h1>User Profile</h1>
    <%
        User user = (User ) request.getAttribute("user");
        if (user != null) {
    %>
        <p>Username: <%= user.getUsername() %></p>
        <p>Email: <%= user.getEmail() %></p>
        <p>Full Name: <%= user.getFullName() %></p>
        <form action="updateProfile" method="post">
            <input type="hidden" name="username" value="<%= user.getUsername() %>"/>
            <label for="email">Update Email:</label><br>
            <input type="email" name="email" value="<%= user.getEmail() %>" required/><br>
            <label for="full_name">Update Full Name:</label><br>
            <input type="text" name="full_name" value="<
            Complete profile.jsp
Here’s the complete implementation of the profile.jsp file:
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ page import="com.user.User" %>
<%@ page session="false" %>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>User Profile</title>
</head>
<body>
    <h1>User Profile</h1>
    <%
        User user = (User ) request.getAttribute("user");
        if (user != null) {
    %>
        <p>Username: <%= user.getUsername() %></p>
        <p>Email: <%= user.getEmail() %></p>
        <p>Full Name: <%= user.getFullName() %></p>
        <form action="updateProfile" method="post">
            <input type="hidden" name="username" value="<%= user.getUsername() %>"/>
            <label for="email">Update Email:</label><br>
            <input type="email" name="email" value="<%= user.getEmail() %>" required/><br>
            <label for="full_name">Update Full Name:</label><br>
            <input type="text" name="full_name" value="<%= user.getFullName() %>" required/><br>
            <input type="submit" value="Update Profile"/>
        </form>
    <%
        } else {
    %>
        <p>User not found.</p>
    <%
        }
    %>
    <a href="login.jsp">Logout</a>
</body>
</html>
Step 3: Update the Servlets
Now, we need to update the ProfileServlet.java to set the user object as a request attribute before forwarding to the JSP.

Updated ProfileServlet.java
Here’s the updated ProfileServlet.java:
package com.user;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

@WebServlet("/profile")
public class ProfileServlet extends HttpServlet {
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String username = request.getParameter("username"); // Assume username is passed as a query parameter

        try {
            // Database connection
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/user_db", "root", "password");

            // Fetch user details
            String sql = "SELECT * FROM users WHERE username = ?";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setString(1, username);
            ResultSet resultSet = statement.executeQuery();

            // Create User object and set it as a request attribute
            User user = null;
            if (resultSet.next()) {
                user = new User();
                user.setId(resultSet.getInt("id"));
                user.setUsername(resultSet.getString("username"));
                user.setEmail(resultSet.getString("email"));
                user.setFullName(resultSet.getString("full_name"));
            }

            // Set user object as a request attribute
            request.setAttribute("user", user);

            // Forward to profile.jsp
            request.getRequestDispatcher("profile.jsp").forward(request, response);

            // Close connections
            resultSet.close();
            statement.close();
            connection.close();
        } catch (Exception e) {
            e.printStackTrace();
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Error fetching profile.");
        }
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String username = request.getParameter("username");
        String email = request.getParameter("email");
        String fullName = request.getParameter("full_name");

        try {
            // Database connection
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/user_db", "root", "password");

            // Update user details
            String sql = "UPDATE users SET email = ?, full_name = ? WHERE username = ?";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setString(1, email);
            statement.setString(2, fullName);
            statement.setString(3, username);
            statement.executeUpdate();

            // Close connections
            statement.close();
            connection.close();

            // Redirect to profile page
            response.sendRedirect("profile?username=" + username);
        }
        Complete ProfileServlet.java
Here’s the complete implementation of the ProfileServlet.java, including the doPost method for updating user details:


package com.user;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

@WebServlet("/profile")
public class ProfileServlet extends HttpServlet {
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String username = request.getParameter("username"); // Assume username is passed as a query parameter

        try {
            // Database connection
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/user_db", "root", "password");

            // Fetch user details
            String sql = "SELECT * FROM users WHERE username = ?";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setString(1, username);
            ResultSet resultSet = statement.executeQuery();

            // Create User object and set it as a request attribute
            User user = null;
            if (resultSet.next()) {
                user = new User();
                user.setId(resultSet.getInt("id"));
                user.setUsername(resultSet.getString("username"));
                user.setEmail(resultSet.getString("email"));
                user.setFullName(resultSet.getString("full_name"));
            }

            // Set user object as a request attribute
            request.setAttribute("user", user);

            // Forward to profile.jsp
            request.getRequestDispatcher("profile.jsp").forward(request, response);

            // Close connections
            resultSet.close();
            statement.close();
            connection.close();
        } catch (Exception e) {
            e.printStackTrace();
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Error fetching profile.");
        }
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String username = request.getParameter("username");
        String email = request.getParameter("email");
        String fullName = request.getParameter("full_name");

        try {
            // Database connection
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/user_db", "root", "password");

            // Update user details
            String sql = "UPDATE users SET email = ?, full_name = ? WHERE username = ?";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setString(1, email);
            statement.setString(2, fullName);
            statement.setString(3, username);
            statement.executeUpdate();

            // Close connections
            statement.close();
            connection.close();

            // Redirect to profile page
            response.sendRedirect("profile?username=" + username);
        } catch (Exception e) {
            e.printStackTrace();
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Error updating profile.");
        }
    }
}
Summary of the Code
doGet Method:

Retrieves the username from the request.
Connects to the database and fetches user details.
Creates a User  object and sets it as a request attribute.
Forwards the request to profile.jsp to display the user profile.
doPost Method:

Retrieves updated user information from the request.
Connects to the database and updates the user details.
Redirects back to the profile page after updating.
Step 4: Update web.xml
Ensure your web.xml is updated to include the new servlet mappings:
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee 
         http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">

    <servlet>
        <servlet-name>RegistrationServlet</servlet-name>
        <servlet-class>com.user.RegistrationServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>RegistrationServlet</servlet-name>
        <url-pattern>/register</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>ProfileServlet</servlet-name>
        <servlet-class>com.user.ProfileServlet</servlet-class>
    </servlet>
    <servlet
    Complete web.xml
Here’s the complete web.xml file with all servlet mappings:
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee 
         http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">

    <servlet>
        <servlet-name>RegistrationServlet</servlet-name>
        <servlet-class>com.user.RegistrationServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>RegistrationServlet</servlet-name>
        <url-pattern>/register</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>ProfileServlet</servlet-name>
        <servlet-class>com.user.ProfileServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>ProfileServlet</servlet-name>
        <url-pattern>/profile</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>LoginServlet</servlet-name>
        <servlet-class>com.user.LoginServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>LoginServlet</servlet-name>
        <url-pattern>/login</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>UpdateProfileServlet</servlet-name>
        <servlet-class>com.user.UpdateProfileServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>UpdateProfileServlet</servlet-name>
        <url-pattern>/updateProfile</url-pattern>
    </servlet-mapping>
</web-app>
Summary of the Application
Project Structure:

The project contains Servlets for registration, login, and profile management, along with JSP files for user interaction.
JSP Files:

register.jsp: A form for user registration.
login.jsp: A form for user login.
profile.jsp: Displays user profile information and allows updates.
Servlets:

RegistrationServlet: Handles user registration by inserting user data into the database.
LoginServlet: Validates user credentials and redirects to the profile page upon successful login.
ProfileServlet: Fetches user details from the database and forwards them to profile.jsp.
UpdateProfileServlet: Updates user details in the database based on form submissions from profile.jsp.
Step 5: Testing the Application
Deploy the Application: Ensure your servlet is deployed on your Tomcat server.
Start the Tomcat Server: Start your Tomcat server.
Access the Registration Page: Open your web browser and navigate to:
http://localhost:8080/UserRegistrationApp/register.jsp
Register a New User: Fill out the registration form and submit it.
Login: After registration, navigate to the login page:

http://localhost:8080/UserRegistrationApp/login.jsp
Enter the username and password you registered with.
View Profile: Upon successful login, you should be redirected to your profile page, where you can view and update your information.
Security Considerations
Password Hashing: Always hash passwords before storing them in the database. Use libraries like BCrypt for secure password hashing.
Input Validation: Validate and sanitize user inputs to prevent SQL injection and other attacks.
HTTPS: Use HTTPS to encrypt data in transit, especially sensitive information like passwords.
Conclusion
You now have a fully functional user registration and profile management system using Java Servlets and JSP. This application allows users to register, log in, view their profiles, and update their information. You can further enhance this application by adding features like password recovery, email verification, and more robust error handling.


