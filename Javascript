1. JavaScript for Form Validation
Here’s a simple JavaScript function to validate the user registration form. This function checks if the username, email, and password fields are filled out correctly.

document.addEventListener("DOMContentLoaded", function () {
    const registrationForm = document.getElementById("registrationForm");

    if (registrationForm) {
        registrationForm.addEventListener("submit", function (event) {
            const username = document.getElementById("username").value.trim();
            const email = document.getElementById("email").value.trim();
            const password = document.getElementById("password").value.trim();
            let valid = true;

            // Clear previous error messages
            clearErrors();

            // Validate username
            if (username === "") {
                showError("username", "Username is required.");
                valid = false;
            }

            // Validate email
            if (email === "") {
                showError("email", "Email is required.");
                valid = false;
            } else if (!validateEmail(email)) {
                showError("email", "Please enter a valid email address.");
                valid = false;
            }

            // Validate password
            if (password === "") {
                showError("password", "Password is required.");
                valid = false;
            } else if (password.length < 6) {
                showError("password", "Password must be at least 6 characters long.");
                valid = false;
            }

            if (!valid) {
                event.preventDefault(); // Prevent form submission
            }
        });
    }

    function validateEmail(email) {
        const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return re.test(String(email).toLowerCase());
    }

    function showError(fieldId, message) {
        const field = document.getElementById(fieldId);
        const error = document.createElement("div");
        error.className = "error";
        error.innerText = message;
        field.parentNode.insertBefore(error, field.nextSibling);
    }

    function clearErrors() {
        const errors = document.querySelectorAll(".error");
        errors.forEach(error => error.remove());
    }
});

2. Update HTML for Registration Form
Make sure to include the id for the form and the input fields in your registration template.

<form id="registrationForm" action="/register" method="POST">
    <label for="username">Username:</label>
    <input type="text" id="username" name="username" required>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required>

    <label for="password">Password:</label>
    <input type="password" id="password" name="password" required>

    <button type="submit">Register</button>
</form>

3. Include JavaScript in HTML
Make sure to link the JavaScript file in your HTML templates. Add the following line before the closing </body> tag:

<script src="script.js"></script>

4. CSS for Error Messages
You can add some styles for the error messages in your CSS file to make them visually distinct.

4. CSS for Error Messages
You can add some styles for the error messages in your CSS file to make them visually distinct.

5. Interactivity for User Management
You can also add interactivity for the user management interface, such as confirmation dialogs for delete actions. Here’s an example of how to implement a confirmation dialog using JavaScript.

JavaScript for Confirmation Dialog
You can add this function to your existing JavaScript file:

function confirmDelete(event) {
    const confirmation = confirm("Are you sure you want to delete this user?");
    if (!confirmation) {
        event.preventDefault(); // Prevent the default action if the user cancels
    }
}

// Attach the confirmDelete function to delete links
document.querySelectorAll('a[href*="delete-user"]').forEach(link => {
    link.addEventListener("click", confirmDelete);
});

Form Validation: Checks for empty fields, valid email format, and password length.
Error Messages: Displays error messages below the respective input fields.
Confirmation Dialog: Asks for confirmation before deleting a user.
This will enhance the user experience by ensuring that users provide valid input and confirming critical actions. Make sure to test the functionality thoroughly to ensure everything works as expected.
