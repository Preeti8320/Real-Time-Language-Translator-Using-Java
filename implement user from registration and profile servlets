Prerequisites
Database: You will need a database to store user information. For this example, we will use a simple MySQL database.
JDBC Driver: Ensure you have the MySQL JDBC driver in your project’s classpath.
Java Development Kit (JDK): Ensure you have JDK installed on your machine.
Apache Tomcat: Use Apache Tomcat as your servlet container.
Step 1: Set Up the Database
Create a Database: Create a database named user_db.
Create a User Table: Create a table named users with the following SQL command:
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    email VARCHAR(100) NOT NULL,
    full_name VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
Step 2: Create the Project Structure
Your project structure should look something like this:
User RegistrationApp
├── src
│   └── com
│       └── user
│           ├── RegistrationServlet.java
│           ├── ProfileServlet.java
│           └── User.java
├── WebContent
│   ├── WEB-INF
│   │   └── web.xml
│   ├── register.html
│   └── profile.html
Step 3: Create the User Class
Create a User .java class to represent a user:
package com.user;

public class User {
    private int id;
    private String username;
    private String password;
    private String email;
    private String fullName;

    // Getters and Setters
    // ...
}
Step 4: Create the Registration Servlet
Create a RegistrationServlet.java to handle user registration:
package com.user;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;

@WebServlet("/register")
public class RegistrationServlet extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String username = request.getParameter("username");
        String password = request.getParameter("password");
        String email = request.getParameter("email");
        String fullName = request.getParameter("full_name");

        try {
            // Database connection
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/user_db", "root", "password");

            // Insert user into database
            String sql = "INSERT INTO users (username, password, email, full_name) VALUES (?, ?, ?, ?)";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setString(1, username);
            statement.setString(2, password); // In a real application, hash the password
            statement.setString(3, email);
            statement.setString(4, fullName);
            statement.executeUpdate();

            // Close connection
            statement.close();
            connection.close();

            // Redirect to profile page
            response.sendRedirect("profile.html");
        } catch (Exception e) {
            e.printStackTrace();
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Registration failed.");
        }
    }
}
Step 5: Create the Profile Servlet
Create a ProfileServlet.java to handle user profile display and updates:
package com.user;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

@WebServlet("/profile")
public class ProfileServlet extends HttpServlet {
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String username = request.getParameter("username"); // Assume username is passed as a query parameter

        try {
            // Database connection
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/user_db", "root", "password");

            // Fetch user details
            String
Complete ProfileServlet.java
Here’s the complete implementation of the ProfileServlet.java:

package com.user;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

@WebServlet("/profile")
public class ProfileServlet extends HttpServlet {
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String username = request.getParameter("username"); // Assume username is passed as a query parameter

        try {
            // Database connection
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/user_db", "root", "password");

            // Fetch user details
            String sql = "SELECT * FROM users WHERE username = ?";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setString(1, username);
            ResultSet resultSet = statement.executeQuery();

            // Display user profile
            response.setContentType("text/html");
            PrintWriter out = response.getWriter();
            out.println("<h1>User Profile</h1>");

            if (resultSet.next()) {
                out.println("<p>Username: " + resultSet.getString("username") + "</p>");
                out.println("<p>Email: " + resultSet.getString("email") + "</p>");
                out.println("<p>Full Name: " + resultSet.getString("full_name") + "</p>");
                out.println("<form action='updateProfile' method='post'>");
                out.println("<input type='hidden' name='username' value='" + resultSet.getString("username") + "'/>");
                out.println("<label for='email'>Update Email:</label><br>");
                out.println("<input type='email' name='email' value='" + resultSet.getString("email") + "' required/><br>");
                out.println("<label for='full_name'>Update Full Name:</label><br>");
                out.println("<input type='text' name='full_name' value='" + resultSet.getString("full_name") + "' required/><br>");
                out.println("<input type='submit' value='Update Profile'/>");
                out.println("</form>");
            } else {
                out.println("<p>User not found.</p>");
            }

            // Close connections
            resultSet.close();
            statement.close();
            connection.close();
        } catch (Exception e) {
            e.printStackTrace();
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Error fetching profile.");
        }
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String username = request.getParameter("username");
        String email = request.getParameter("email");
        String fullName = request.getParameter("full_name");

        try {
            // Database connection
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/user_db", "root", "password");

            // Update user details
            String sql = "UPDATE users SET email = ?, full_name = ? WHERE username = ?";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setString(1, email);
            statement.setString(2, fullName);
            statement.setString(3, username);
            statement.executeUpdate();

            // Close connections
            statement.close();
            connection.close();

            // Redirect to profile page
            response.sendRedirect("profile?username=" + username);
        } catch (Exception e) {
            e.printStackTrace();
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Error updating profile.");
        }
    }
}
Explanation of ProfileServlet.java
doGet Method:

This method retrieves user details based on the username passed as a query parameter.
It connects to the database, fetches the user details, and displays them in an HTML format.
It also provides a form to update the user's email and full name.
doPost Method:

This method handles the form submission for updating the user profile.
It updates the user's email and full name in the database and then redirects back to the profile page.
Step 6: Create the Registration HTML Form
Create a register.html file in the WebContent directory:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>User Registration</title>
</head>
<body>
    <h1>User
Certainly! Let's complete the register.html file for user registration and also provide the necessary web.xml configuration for the servlets.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>User Registration</title>
</head>
<body>
    <h1>User Registration</h1>
    <form action="register" method="post">
        <label for="username">Username:</label><br>
        <input type="text" id="username" name="username" required><br>
        
        <label for="password">Password:</label><br>
        <input type="password" id="password" name="password" required><br>
        
        <label for="email">Email:</label><br>
        <input type="email" id="email" name="email" required><br>
        
        <label for="full_name">Full Name:</label><br>
        <input type="text" id="full_name" name="full_name" required><br><br>
        
        <input type="submit" value="Register">
    </form>
    <p>Already have an account? <a href="login.html">Login here</a>.</p>
</body>
</html>
Step 7: Create the Profile HTML Page
Create a profile.html file in the WebContent directory. This page will be used to display the user profile and allow updates:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>User Profile</title>
</head>
<body>
    <h1>User Profile</h1>
    <div id="profile-info">
        <!-- User profile information will be displayed here -->
    </div>
    <a href="register.html">Register a new user</a>
</body>
</html>
Step 8: Create web.xml
In the WEB-INF directory, create or edit the web.xml file to configure your servlets:
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee 
         http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">

    <servlet>
        <servlet-name>RegistrationServlet</servlet-name>
        <servlet-class>com.user.RegistrationServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>RegistrationServlet</servlet-name>
        <url-pattern>/register</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>ProfileServlet</servlet-name>
        <servlet-class>com.user.ProfileServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>ProfileServlet</servlet-name>
        <url-pattern>/profile</url-pattern>
    </servlet-mapping>
</web-app>
Step 9: Create a Login Page (Optional)
If you want to implement a login feature, you can create a simple login.html page:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>User Login</title>
</head>
<body>
    <h1>User Login</h1>
    <form action="login" method="post">
        <label for="username">Username:</label><br>
        <input type="text" id="username" name="username" required><br>
        
        <label for="password">Password:</label><br>
        <input type="password" id="password" name="password" required><br><br>
        
        <input type="submit" value="Login">
    </form>
    <p>Don't have an account? <a href="register.html">Register here</a>.</p>
</body>
</html>
Step 10: Implement Login Functionality (Optional)
If you want to implement login functionality, you can create a LoginServlet.java:
package com.user;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

@WebServlet("/login")
public class LoginServlet extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
Complete LoginServlet.java
Here’s the complete implementation of the LoginServlet.java:
package com.user;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

@WebServlet("/login")
public class LoginServlet extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String username = request.getParameter("username");
        String password = request.getParameter("password");

        try {
            // Database connection
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/user_db", "root", "password");

            // Check user credentials
            String sql = "SELECT * FROM users WHERE username = ? AND password = ?";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setString(1, username);
            statement.setString(2, password); // In a real application, you should hash the password
            ResultSet resultSet = statement.executeQuery();

            if (resultSet.next()) {
                // Successful login
                response.sendRedirect("profile?username=" + username);
            } else {
                // Invalid credentials
                response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Invalid username or password.");
            }

            // Close connections
            resultSet.close();
            statement.close();
            connection.close();
        } catch (Exception e) {
            e.printStackTrace();
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Error during login.");
        }
    }
}
Explanation of LoginServlet.java
doPost Method:
This method retrieves the username and password from the login form.
It connects to the database and checks if the provided credentials match any user in the users table.
If the credentials are valid, it redirects the user to their profile page. If not, it sends an unauthorized error response.
Step 11: Update web.xml
Make sure to update your web.xml to include the LoginServlet:
<servlet>
    <servlet-name>LoginServlet</servlet-name>
    <servlet-class>com.user.LoginServlet</servlet-class>
</servlet>
<servlet-mapping>
    <servlet-name>LoginServlet</servlet-name>
    <url-pattern>/login</url-pattern>
</servlet-mapping>
Step 12: Testing the Application
Deploy the Application: Ensure your servlet is deployed on your Tomcat server.
Start the Tomcat Server: Start your Tomcat server.
Access the Registration Page: Open your web browser and navigate to:
http://localhost:8080/UserRegistrationApp/register.html
Register a New User: Fill out the registration form and submit it.
Login: After registration, navigate to the login page:
http://localhost:8080/UserRegistrationApp/login.html
Enter the username and password you registered with.
View Profile: Upon successful login, you should be redirected to your profile page, where you can view and update your information.
Step 13: Security Considerations
Password Hashing: In a real application, never store passwords in plain text. Use a hashing algorithm (like BCrypt) to hash passwords before storing them in the database.
Input Validation: Always validate and sanitize user inputs to prevent SQL injection and other attacks.
HTTPS: Use HTTPS to encrypt data in transit, especially sensitive information like passwords.
Conclusion
You now have a basic user registration and profile management system using Java Servlets. This application allows users to register, log in, view their profiles, and update their information. You can further enhance this application by adding features like password recovery, email verification, and more robust error handling.
